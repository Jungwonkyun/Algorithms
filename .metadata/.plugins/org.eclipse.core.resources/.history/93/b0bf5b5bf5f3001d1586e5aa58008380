package algorithms;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BlackFriday {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int C = Integer.parseInt(st.nextToken());
		
		int [] stuff =  new int[N];
		
		String [] in = br.readLine().split(" ");		
		for(int i = 0; i < N; i++) {
			int now = Integer.parseInt(in[i]);
			stuff[i] = now;
			
			//1개만 픽해도 되는 경우
			if(now == C) {
				System.out.println(1);
				System.exit(0);
			}
		}
		
		Arrays.sort(stuff);
		if(stuff[0]>C) {
			System.out.println(0);
			System.exit(0);
		}
		
		int end = 0;
		//이미 C가 넘는 무게는 필요가 없음 end에는 C보다 크지않는
		//최대 무게의 index값을 가지고 있다
		for(int i = 0; i < N; i++) {
			if(stuff[i]>C)break;
			end = i;
		}
		
		int left = 0; 
		int right = end;
		int mid; 
		
		while(left <= right) {
			mid = (left+right)/2;
			
			//2개 만으로 가능하다면 
			if(stuff[left]+stuff[right] == C) {
				System.out.println(1);
				System.exit(0);
			}
			
			//무게가 넘을경우
			else if(stuff[left]+stuff[right] > C) {
				right = mid-1;
			}
			
			//무게가 부족할 경우
			else {
				left = mid+1;
			}
		}
		
		
		
		System.out.println(0);
		
	}

}
